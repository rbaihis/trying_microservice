server:
  port: 8070

management:
  metrics:
    tags:
      application: order-service

spring:
  datasource:
    url: jdbc:postgresql://192.168.43.10:5432/orderdb
    username: seif
    password: seif
    driver-class-name: org.postgresql.Driver
  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: create
    database: postgresql
    properties:
      hibernate.hbm2ddl.auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    bootstrap-servers: 192.168.43.10:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        interceptor.classes: tn.seif.ecommerce.config.external.KafkaProducerInterceptor
        spring.json.type.mapping: orderConfirmation:tn.seif.ecommerce.order.dto.OrderConfirmation
        enable-idempotence: true # Ensures that messages are not sent more than once
        retry.backoff.ms: 300  # Time to wait before retrying in milliseconds
        linger.ms: 100 # Wait up to 5 ms to collect messages into a batch before sending
        request.timeout.ms: 1000 # request time out
        #delivery.timeout.ms >=( linger.ms + request.timeout.mss )
        delivery.timeout.ms: 4500  # Total time to wait for the message to be sent, including retries;  if not sent in this time, it will fail
        #transaction.timeout.ms: 60000   # Timeout for transactions; includes the time from starting the transaction to committing or aborting it
      acks: all
      retries: 10
      compression-type: snappy # optional if u want to compress
      batch-size: 16384
      buffer-memory: 33554432






notification-service:
  message:
    destination: order-topic


